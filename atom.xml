<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sinorychan.github.io</id>
    <title>sinorychan</title>
    <updated>2020-06-01T04:47:47.224Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sinorychan.github.io"/>
    <link rel="self" href="https://sinorychan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://sinorychan.github.io/images/avatar.png</logo>
    <icon>https://sinorychan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, sinorychan</rights>
    <entry>
        <title type="html"><![CDATA[Swift- 多线程编程 Operation]]></title>
        <id>https://sinorychan.github.io/post/swift-duo-xian-cheng-bian-cheng-operation/</id>
        <link href="https://sinorychan.github.io/post/swift-duo-xian-cheng-bian-cheng-operation/">
        </link>
        <updated>2020-05-17T14:38:16.000Z</updated>
        <content type="html"><![CDATA[<p>一、NSOperation子类</p>
<p>NSOperation是一个抽象类,并不具备封装操作的能力,必须使用它的子类</p>
<p>1、NSInvocationOperation(Swift不支持)</p>
<p>默认是不会开启线程的,只会在当前的线程中执行操作,可以通过Operation和OperationQueue实现多线程</p>
<p>2、BlockOperation：</p>
<p>只要BlockOperation封装的操作数 &gt; 1,就会异步执行操作,但是不会无限制的创建线程</p>
<pre><code>let blockOp = BlockOperation()
blockOp.queuePriority = .veryHigh //设置优先级
blockOp.addExecutionBlock {
    print(&quot;执行了 blockOp1 \(Thread.current)&quot;)
}
blockOp.addExecutionBlock {
    print(&quot;执行了 blockOp2 \(Thread.current)&quot;)
}
blockOp.start() // 开始执行
//        blockOp.cancel()// 取消
</code></pre>
<p>二、NSOperationQueue</p>
<p>1、创建队列</p>
<p>获取主队列以及添加操作到队列，主队列是串行队列,无论是否设置最大并行数量都是在当前线程执行，不会创建新的线程<br>
let queue = OperationQueue.main<br>
queue.addOperation {}</p>
<p>同时具备串行和并发的功能,默认情况下是并发的,可以手动设置为串行队列,通过设置最大并发数属性来更改</p>
<pre><code>let queue = OperationQueue()
queue.maxConcurrentOperationCount = 1
queue.addOperation {
 for _ in 0...50000{
    print(&quot;OperationQueue1执行了&quot;,Thread.current)
     }
}
//addOperation已经在内部执行了start方法了
</code></pre>
<p>2、最大并发数</p>
<p>1、将最大操作数的值设置为1,可以实现任务的串行效果,但是要注意的是,并不是只开一条子线程(通常会开两条子线程,循环回收复用)</p>
<p>2、最大并发数6以内，不要开太多，因为虽然任务是在子线程进行处理的，但是cpu处理这些过多的子线程可能会影响UI，让UI卡顿。</p>
<pre><code>queue.maxConcurrentOperationCount=2;
</code></pre>
<p>3、队列的取消</p>
<p>1、取消队列中的所有任务,除了正在执行的任务,一旦被取消,就不能回复之前的操作。</p>
<p>2、当前正在处于执行状态的任务是不能够取消的,只能取消等待的任务</p>
<pre><code>queue.cancelAllOperations()
</code></pre>
<p>4、队列的挂起和恢复</p>
<p>当前正在处于执行状态的任务是不能够暂停的,只能暂停等待的任务</p>
<pre><code>queue.isSuspended = true    //暂停队列
queue.isSuspended = false  //恢复队列
</code></pre>
<p>5、等待Options完成</p>
<p>如果需要在当前线程中处理operation完成后的结果,可以使用NSOperation的waitUntilFinished方法阻塞当前线程，等待operation完成</p>
<pre><code>// 会阻塞当前线程，等到某个operation执行完毕  
[operation waitUntilFinished];

使用NSOperationQueue的waitUntilAllOperationsAreFinished方法

// 阻塞当前线程，等待queue的所有操作执行完毕  
[queue waitUntilAllOperationsAreFinished];
</code></pre>
<p>6、添加NSOperation的依赖对象</p>
<p>当某个NSOperation对象依赖于其它NSOperation对象的完成时，就可以通过addDependency方法添加一个或者多个依赖的对象，只有所有依赖的对象都已经完成操作，当前NSOperation对象才会开始执行操作。另外，通过removeDependency方法来删除依赖对象。</p>
<pre><code>//设置依赖关系
let blockOpe1 = BlockOperation()
blockOpe1.addExecutionBlock {
print(&quot;blockOpe1执行了&quot;)
}
let blockOpe2 = BlockOperation()
blockOpe2.addExecutionBlock {
print(&quot;blockOpe2执行了&quot;)
}
blockOpe1.addDependency(blockOpe2)
queue.addOperation(blockOpe1)
queue.addOperation(blockOpe2)
</code></pre>
<p>可以看出，先执行blockOpe2，再执行blockOpe1</p>
<p>7、修改Operations的执行顺序<br>
默认所有operation都拥有“普通”优先级,不过可以通过setQueuePriority:方法来提升或降低operation对象的优先级。</p>
<pre><code>let blockOpe = BlockOperation()
blockOpe.queuePriority = .low
queue.addOperation(blockOpe)  
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Run custom shell script '[CP]Copy Pods Resources' 错误 ]]></title>
        <id>https://sinorychan.github.io/post/ios-bian-yi-cuo-wu-zheng-li/</id>
        <link href="https://sinorychan.github.io/post/ios-bian-yi-cuo-wu-zheng-li/">
        </link>
        <updated>2020-05-17T07:09:55.000Z</updated>
        <summary type="html"><![CDATA[<p>资源权限问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>资源权限问题</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://sinorychan.github.io/post-images/1589699944210.png" alt="" loading="lazy"></figure>
<!-- more -->
<p>解决方法<br>
进入项目下面的路径下<br>
<img src="https://sinorychan.github.io/post-images/1589699960183.png" alt="" loading="lazy"><br>
终端执行。 chomd a+x 将上面路径拖进来 按enter键执行命令，再次运行项目就可以跑起来了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[检查iOS项目中是否还有使用UIWebView]]></title>
        <id>https://sinorychan.github.io/post/ni-hao-a/</id>
        <link href="https://sinorychan.github.io/post/ni-hao-a/">
        </link>
        <updated>2020-05-16T10:41:21.000Z</updated>
        <summary type="html"><![CDATA[<p>主要方便查找静态库和动态库中使用到UIWebView的地方。</p>
]]></summary>
        <content type="html"><![CDATA[<p>主要方便查找静态库和动态库中使用到UIWebView的地方。</p>
<!-- more -->
<p>方法一：<br>
cd 项目根目录</p>
<pre><code>find . -type f | grep -e &quot;.a&quot; -e &quot;.framework&quot; | xargs grep -s UIWebView
</code></pre>
<!-- more -->
<p>方法二：<br>
复制代码生成文件check.py。<br>
将文件放置项目根目录，cd到该文件目录，执行python check.py。<br>
注意：import subprocess是python3.0以上版本使用，否则用import commands。</p>
<pre><code>import os
import subprocess

def check():

for path, dir_list, file_list in os.walk('./'):

    for file_name in file_list:

        # 略过 .DS_Store 文件
        if file_name.find('.DS_Store') != -1:
            continue

        # 略过 没有framework  .a 的文件
        #if path.find('.framework') == -1 and file_name.find('.a') == -1:
            #continue

        full_path = os.path.join(path, file_name)
        # print(full_path)

        if full_path.endswith('.h'):
            continue

        (status, output) = subprocess.getstatusoutput('file %s' % full_path)
        index = output.find('Mach-O universal binary')
        if index != -1:
            # print(full_path)

            (status, output) = subprocess.getstatusoutput('strings %s | grep -ir &quot;uiwebview&quot;' % full_path)
            if len(output) &gt; 0:
                print (full_path)
if __name__ == &quot;__main__&quot;:
print('Start to check library')
check()
</code></pre>
]]></content>
    </entry>
</feed>